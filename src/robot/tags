!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
BUFFER_LENGTH	robot.cc	35;"	d	file:
CPPFLAGS	GNUmakefile	/^CPPFLAGS=-I ..\/..\/include\/$/;"	m
CXXFLAGS	GNUmakefile	/^CXXFLAGS=-g -O0$/;"	m
IP_LENGTH	robot.cc	34;"	d	file:
LDFLAGS	GNUmakefile	/^LDFLAGS=-lsqlite3$/;"	m
MAX_EVENTS	robot.cc	33;"	d	file:
callback	robot.cc	/^int callback(void *NotUsed, int argc, char **argv, char **colname)$/;"	f
content	robot.cc	/^char *content = NULL;$/;"	v
db	robot.cc	/^sqlite3 *db;$/;"	v
decoding_chunked_content	robot.cc	/^int decoding_chunked_content(const char *content_body, int length, char *end_of_zero)$/;"	f
do_use_fd	robot.cc	/^int do_use_fd(const char *uri, const char *host)$/;"	f
efd	robot.cc	/^int efd = 0;$/;"	v
ev	robot.cc	/^struct epoll_event ev, events[MAX_EVENTS];$/;"	v	typeref:struct:epoll_event
events	robot.cc	/^struct epoll_event ev, events[MAX_EVENTS];$/;"	v	typeref:struct:
fds	robot.cc	/^int fds[MAX_EVENTS] = {0};$/;"	v
gURL	robot.cc	/^char gURL[1024][1024];$/;"	v
handler	robot.cc	/^void handler(int signum)$/;"	f
initializing_sqlite3	robot.cc	/^int initializing_sqlite3(const char *argv2)$/;"	f
insert_it	robot.cc	/^int insert_it(const char *url, const char *title)$/;"	f
let_us_go_this_new_url	robot.cc	/^int let_us_go_this_new_url(const char *url)$/;"	f
main	robot.cc	/^int main(int argc, char **argv)$/;"	f
nconnect	robot.cc	/^int nconnect = 0;$/;"	v
parsing_http_protocol_response	robot.cc	/^int parsing_http_protocol_response(const char *content, int length, char **chunked, int *i_content_length)$/;"	f
pos	robot.cc	/^int pos = 0;$/;"	v
quit	robot.cc	/^int quit = 0;$/;"	v
reads	robot.cc	/^int reads(int fd)$/;"	f
search_url	robot.cc	/^int search_url(const char *url, const char *string, int length)$/;"	f
set_disposition	robot.cc	/^int set_disposition()$/;"	f
set_logging	robot.cc	/^int set_logging(int argc, const char **argv)$/;"	f
setnonblocking	robot.cc	/^int setnonblocking(int fd)$/;"	f
unset_logging	robot.cc	/^int unset_logging()$/;"	f
usage	robot.cc	/^int usage(const char *argv0)$/;"	f
writes	robot.cc	/^int writes(int fd, const char *uri, const char *host)$/;"	f
