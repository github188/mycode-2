Index: handle.cc
===================================================================
--- handle.cc	(revision 150)
+++ handle.cc	(working copy)
@@ -87,11 +87,12 @@
 		}
 
 		if (strncmp(source, destination, sizeof source) == 0 && strlen(source) > 0) {
-			t->set_alive(true);
+			// update or refresh interface
 			interface->erase(t->get_id());
+
 			t->set_id(source);
-			(*interface)[t->get_id()] = t->get_fd();
-			t->set_id(source);
+			t->set_alive(true);
+			interface->insert(std::make_pair(t->get_id(), t->get_fd()));
 			if (t->get_rp() >= width) {
 				plog(notice, "Echo\n");
 				t->set_wx(t->get_rx(), t->get_rp());
@@ -109,16 +110,24 @@
 				break;
 			}
 
+			int fd2 = 0;
 			Transport *t2 = NULL;
 			id = destination;
-			int fd2 = (*interface)[id];
+
+			std::map<std::string, int>::iterator ie = interface->find(id);
+			if (ie != interface->end()) {
+				plog(error, "(%s, %d)\n", ie->first.c_str(), ie->second);
+				fd2 = ie->second;
+			} else {
+				plog(info, "Back to wait id = \"%s\"\n", destination);
+				break;
+			}
+
 			std::map<int, Transport*>::iterator i2 = m->find(fd2);
 			if (i2 != m->end()) {
 				plog(warning, "Found, first = %d, second = %p\n", i2->first, i2->second);
 				t2 = i2->second;
-			}
-
-			if (t2 == NULL) {
+			} else {
 				plog(info, "Back to wait id = \"%s\"\n", destination);
 				break;
 			}
Index: task.cc
===================================================================
--- task.cc	(revision 150)
+++ task.cc	(working copy)
@@ -321,7 +321,7 @@
 		}
 
 		while (!is_quit) {
-			ret = task_r(r, w, m);
+			ret = task_r(r, w, m, interface);
 
 #if 0
 			std::map<int, Transport*>::iterator i = m->begin();
@@ -359,7 +359,7 @@
 	return ret;
 }
 
-int task_r(std::list<Transport*> *r, std::list<Transport*> *w, std::map<int, Transport*> *m) {
+int task_r(std::list<Transport*> *r, std::list<Transport*> *w, std::map<int, Transport*> *m, std::map<std::string, int> *interface) {
 	assert(r != NULL && m != NULL);
 	int ret = 0;
 	do {
@@ -376,6 +376,7 @@
 			break;
 		}
 
+		Transport *t = NULL;
 		for (int n = 0; n < nfds; n++) {
 			if (events[n].data.fd == listen_sock) {
 				int acceptfd = accept(listen_sock, (struct sockaddr *) &peer_addr, &peer_addrlen);
@@ -404,9 +405,10 @@
 				strcpy(peer_ip, inet_ntoa(peer_addr.sin_addr));
 				plog(notice, "NAME %s:%d->%s:%d\n", ip, htons(addr.sin_port), peer_ip, htons(peer_addr.sin_port));
 
-				Transport *t = new Transport(acceptfd, created, peer_addr, peer_addrlen);
+				t = new Transport(acceptfd, created, peer_addr, peer_addrlen);
 				m->insert(std::make_pair(acceptfd, t));
 			} else {
+				std::map<int, Transport*>::iterator im = m->begin();
 				plog(debug, "events[%d].events = 0x%03x\n", n, events[n].events);
 				if (events[n].events & EPOLLERR) {
 					plog(error, "Error condition happened on the associated file descriptor = %d.\n", events[n].data.fd);
@@ -421,9 +423,39 @@
 						continue;
 					}
 
-					w->remove((*m)[events[n].data.fd]);
-					delete (*m)[events[n].data.fd];
-					m->erase(events[n].data.fd);
+
+
+#if 0
+					plog(emergency, "before: fd = %d, interface->size = %d\n", events[n].data.fd, interface->size());
+					std::map<std::string, int>::iterator i = interface->begin();
+					while (i != interface->end()) {
+						plog(error, "(%s, %d)\n", i->first.c_str(), i->second);
+						i++;
+					}
+#endif
+
+
+					im = m->find(events[n].data.fd);
+					if (im != m->end()) {
+						plog(warning, "Found, first = %d, second = %p\n", im->first, im->second);
+						t = im->second;
+						w->remove(t);
+						interface->erase(t->get_id());
+						delete t;
+						m->erase(events[n].data.fd);
+					}
+
+#if 0
+					plog(emergency, "after: fd = %d, interface->size = %d\n", events[n].data.fd, interface->size());
+					// std::map<std::string, int>::iterator i = interface->begin();
+					i = interface->begin();
+					while (i != interface->end()) {
+						plog(error, "(%s, %d)\n", i->first.c_str(), i->second);
+						i++;
+					}
+#endif
+
+
 					continue;
 				}
 
@@ -440,9 +472,16 @@
 						continue;
 					}
 
-					w->remove((*m)[events[n].data.fd]);
-					delete (*m)[events[n].data.fd];
-					m->erase(events[n].data.fd);
+					im = m->find(events[n].data.fd);
+					if (im != m->end()) {
+						plog(warning, "Found, first = %d, second = %p\n", im->first, im->second);
+						t = im->second;
+						w->remove(t);
+						interface->erase(t->get_id());
+						delete t;
+						m->erase(events[n].data.fd);
+					}
+
 					continue;
 				}
 
@@ -468,9 +507,15 @@
 					}
 #endif
 
-					w->remove((*m)[events[n].data.fd]);
-					delete (*m)[events[n].data.fd];
-					m->erase(events[n].data.fd);
+					im = m->find(events[n].data.fd);
+					if (im != m->end()) {
+						plog(warning, "Found, first = %d, second = %p\n", im->first, im->second);
+						t = im->second;
+						w->remove(t);
+						interface->erase(t->get_id());
+						delete t;
+						m->erase(events[n].data.fd);
+					}
 
 #if 0
 					plog(emergency, "end: fd = %d, m->size = %d\n", events[n].data.fd, m->size());
Index: GNUmakefile
===================================================================
--- GNUmakefile	(revision 150)
+++ GNUmakefile	(working copy)
@@ -4,7 +4,7 @@
 	rm -f main.o task.o handle.o ../../include/logging.o i1
 
 i1: main.o task.o handle.o ../../include/logging.o
-	$(CXX) -o $@ $^ $(LDFLAGS) && ctags * ../../include/*
+	$(CXX) -o $@ $^ $(LDFLAGS) && ctags * ../../include/* && svn diff > Changelog
 
 # gcc -I ../../include/ -MM *.cc ../../include/logging.cc -std=gnu++0x
 handle.o: handle.cc handle.h transport.h ../../include/logging.h
Index: task.h
===================================================================
--- task.h	(revision 150)
+++ task.h	(working copy)
@@ -19,7 +19,7 @@
 int uninit(std::list<Transport*> *r, std::list<Transport*> *w, std::map<int, Transport*> *m, std::map<std::string, int> *interface);
 
 int task(int argc, char **argv);
-int task_r(std::list<Transport*> *r, std::list<Transport*> *w, std::map<int, Transport*> *m);
+int task_r(std::list<Transport*> *r, std::list<Transport*> *w, std::map<int, Transport*> *m, std::map<std::string, int> *interface);
 int task_x(std::list<Transport*> *r, std::list<Transport*> *w, std::map<int, Transport*> *m, std::map<std::string, int> *interface);
 int task_w(std::list<Transport*> *w);
 
Index: tags
===================================================================
--- tags	(revision 150)
+++ tags	(working copy)
@@ -117,7 +117,7 @@
 t0	../../include/logging.h	/^	struct tm t0; \/\/ start time$/;"	m	struct:logging	typeref:struct:logging::tm
 t1	../../include/logging.h	/^	struct tm t1; \/\/ the last flush stream date\/time$/;"	m	struct:logging	typeref:struct:logging::tm
 task	task.cc	/^int task(int argc, char **argv) {$/;"	f
-task_r	task.cc	/^int task_r(std::list<Transport*> *r, std::list<Transport*> *w, std::map<int, Transport*> *m) {$/;"	f
+task_r	task.cc	/^int task_r(std::list<Transport*> *r, std::list<Transport*> *w, std::map<int, Transport*> *m, std::map<std::string, int> *interface) {$/;"	f
 task_w	task.cc	/^int task_w(std::list<Transport*> *w) {$/;"	f
 task_x	task.cc	/^int task_x(std::list<Transport*> *r, std::list<Transport*> *w, std::map<int, Transport*> *m, std::map<std::string, int> *interface) {$/;"	f
 uninit	task.cc	/^int uninit(std::list<Transport*> *r, std::list<Transport*> *w, std::map<int, Transport*> *m, std::map<std::string, int> *inferface) {$/;"	f
