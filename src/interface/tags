!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
BUFFER_LENGTH	task.cc	9;"	d	file:
CXXFLAGS	Makefile	/^CXXFLAGS=-O0 -g -DD -Wno-pointer-arith$/;"	m
HANDLE_H	handle.h	6;"	d
LDFLAGS	Makefile	/^LDFLAGS=$/;"	m
MAIN_H	main.h	6;"	d
MAX_EVENTS	task.cc	8;"	d	file:
MD5SUM_LENGTH	handle.h	13;"	d
SIZE	transport.h	25;"	d
TASK_H	task.h	6;"	d
TRANSPORT_H	transport.h	6;"	d
Transport	transport.h	/^	Transport(int fd, time_t created, struct sockaddr_in peer_addr, socklen_t peer_addrlen, int size = SIZE) {$/;"	f	class:Transport
Transport	transport.h	/^class Transport {$/;"	c
WIDTH	transport.h	22;"	d
alive	transport.h	/^	bool alive; \/* true: live; false: die *\/$/;"	m	class:Transport
conn_sock	task.cc	/^int listen_sock, conn_sock, nfds, epollfd;$/;"	v
created	transport.h	/^	time_t created; \/* the first communication time *\/$/;"	m	class:Transport
epollfd	task.cc	/^int listen_sock, conn_sock, nfds, epollfd;$/;"	v
ev	task.cc	/^struct epoll_event ev, events[MAX_EVENTS];$/;"	v	typeref:struct:epoll_event
events	task.cc	/^struct epoll_event ev, events[MAX_EVENTS];$/;"	v	typeref:struct:
fd	transport.h	/^	int fd; \/* file descriptor *\/$/;"	m	class:Transport
get_alive	transport.h	/^	bool get_alive(void) {$/;"	f	class:Transport
get_fd	transport.h	/^	int get_fd(void) {$/;"	f	class:Transport
get_identification	transport.h	/^	int get_identification(void) {$/;"	f	class:Transport
get_rp	transport.h	/^	int get_rp(void) {$/;"	f	class:Transport
get_rs	transport.h	/^	int get_rs(void) {$/;"	f	class:Transport
get_rx	transport.h	/^	void *get_rx(void) {$/;"	f	class:Transport
get_wp	transport.h	/^	int get_wp(void) {$/;"	f	class:Transport
get_ws	transport.h	/^	int get_ws(void) {$/;"	f	class:Transport
get_wx	transport.h	/^	void *get_wx(void) {$/;"	f	class:Transport
handle	handle.cc	/^int handle(Transport *t, std::queue<Transport*> *w) {$/;"	f
handler	task.cc	/^void handler(int signum) {$/;"	f
identification	transport.h	/^	int identification; \/* auth token *\/$/;"	m	class:Transport
init	task.cc	/^int init(int argc, char **argv) {$/;"	f
ip	task.cc	/^char ip[3 + 1 + 3 + 1 + 3 + 1 + 3 + 1] = "0.0.0.0";$/;"	v
is_quit	task.cc	/^bool is_quit;$/;"	v
listen_sock	task.cc	/^int listen_sock, conn_sock, nfds, epollfd;$/;"	v
main	main.cc	/^int main(int argc, char **argv) {$/;"	f
md5sum	handle.cc	/^int md5sum(const char *ptr, int size) {$/;"	f
nfds	task.cc	/^int listen_sock, conn_sock, nfds, epollfd;$/;"	v
peer_addr	transport.h	/^	struct sockaddr_in peer_addr;$/;"	m	class:Transport	typeref:struct:Transport::sockaddr_in
peer_addrlen	transport.h	/^	socklen_t peer_addrlen;$/;"	m	class:Transport
port	task.cc	/^short int port = 12340;$/;"	v
pr	transport.h	/^	void pr(int width = WIDTH) {$/;"	f	class:Transport
pw	transport.h	/^	void pw(int width = WIDTH) {$/;"	f	class:Transport
reads	task.cc	/^int reads(Transport *t) {$/;"	f
rp	transport.h	/^	int rp; \/* transport data `Read' pointer position *\/$/;"	m	class:Transport
rs	transport.h	/^	int rs; \/* transport data `Read' size  *\/$/;"	m	class:Transport
rx	transport.h	/^	void *rx; \/* transport data `Read'  *\/$/;"	m	class:Transport
set_alive	transport.h	/^	bool set_alive(bool alive) {$/;"	f	class:Transport
set_disposition	task.cc	/^void set_disposition(void) {$/;"	f
set_fd	transport.h	/^	int set_fd(int fd) {$/;"	f	class:Transport
set_identification	transport.h	/^	int set_identification(int identification) {$/;"	f	class:Transport
set_rp	transport.h	/^	int set_rp(int rp) {$/;"	f	class:Transport
set_rs	transport.h	/^	int set_rs(int rs) {$/;"	f	class:Transport
set_rx	transport.h	/^	void *set_rx(void *rx, int rs) {$/;"	f	class:Transport
set_wp	transport.h	/^	int set_wp(int wp) {$/;"	f	class:Transport
set_ws	transport.h	/^	int set_ws(int ws) {$/;"	f	class:Transport
set_wx	transport.h	/^	void *set_wx(void *wx, int ws) {$/;"	f	class:Transport
setnonblocking	task.cc	/^int setnonblocking(int fd) {$/;"	f
speed	transport.h	/^	double speed; \/* bytes per second *\/$/;"	m	class:Transport
task	task.cc	/^int task(int argc, char **argv) {$/;"	f
task_r	task.cc	/^int task_r(std::queue<Transport*> *r, std::map<int, Transport*> *m) {$/;"	f
task_w	task.cc	/^int task_w(std::queue<Transport*> *w) {$/;"	f
task_x	task.cc	/^int task_x(std::queue<Transport*> *r, std::queue<Transport*> *w, std::map<int, Transport*> *m) {$/;"	f
uninit	task.cc	/^int uninit(std::map<int, Transport*> *m) {$/;"	f
updated	transport.h	/^	time_t updated; \/* the lastest communication time *\/$/;"	m	class:Transport
version	version.h	/^const char *version = "Version: 0.01(experimental)";$/;"	v
wp	transport.h	/^	int wp; \/* transport data `Write' pointer position *\/$/;"	m	class:Transport
writes	task.cc	/^int writes(Transport *t) {$/;"	f
ws	transport.h	/^	int ws; \/* transport data `Write' size *\/$/;"	m	class:Transport
wx	transport.h	/^	void *wx; \/* transport data `Write' *\/$/;"	m	class:Transport
~Transport	transport.h	/^	~Transport() {$/;"	f	class:Transport
