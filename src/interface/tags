!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
BUFFER_LENGTH	task.cc	9;"	d	file:
CPPFLAGS	GNUmakefile	/^CPPFLAGS=-I ..\/..\/include$/;"	m
CXXFLAGS	GNUmakefile	/^CXXFLAGS=-O0 -U NDEBUG -U DEBUG_LOGGING -funsigned-char -g3 -std=c++0x -Wall -Wextra$/;"	m
DATE_MAX	../../include/logging.h	37;"	d
HANDLE_H	handle.h	6;"	d
ID_LENGTH	transport.h	32;"	d
LDFLAGS	GNUmakefile	/^LDFLAGS=-lssl$/;"	m
LENGTH	transport.h	30;"	d
LOGGING_H	../../include/logging.h	9;"	d
MAIN_H	main.h	6;"	d
MAX_EVENTS	task.cc	8;"	d	file:
MD5SUM_LENGTH	transport.h	31;"	d
MODE_MAX	../../include/logging.h	36;"	d
SIZE	transport.h	28;"	d
SIZE_MAX	../../include/logging.h	16;"	d
SIZE_MAX	../../include/logging.h	18;"	d
TASK_H	task.h	6;"	d
TRANSPORT_H	transport.h	6;"	d
Transport	transport.h	/^	Transport(int fd, time_t created, struct sockaddr_in peer_addr, socklen_t peer_addrlen, size_t size = SIZE) {$/;"	f	class:Transport
Transport	transport.h	/^class Transport {$/;"	c
WIDTH	transport.h	25;"	d
__plog	../../include/logging.cc	/^int __plog(enum elevel x, const char *__file, unsigned int __line, const char *__function, const char *fmt, ...)$/;"	f
addr	task.cc	/^struct sockaddr_in addr;$/;"	v	typeref:struct:sockaddr_in
alert	../../include/logging.h	/^	alert,			\/* action must be taken immediately *\/$/;"	e	enum:elevel
alive	transport.h	/^	bool alive; \/* true: live; false: die *\/$/;"	m	class:Transport
author	version.h	/^const char *author = "Ni Baozhu";$/;"	v
cache	../../include/logging.h	/^	unsigned int cache; \/\/ logging has cache lines in memory$/;"	m	struct:logging
cache_max	../../include/logging.h	/^	unsigned int cache_max; \/\/ cache_max lines in memory$/;"	m	struct:logging
checksum	handle.cc	/^int checksum(const void *ptr, size_t size, char *md_value_0, char *digestname) {$/;"	f
clear_color	../../include/logging.cc	/^const char *clear_color = "\\e[0m";$/;"	v
clear_rx	transport.h	/^	void *clear_rx(size_t size = SIZE) {$/;"	f	class:Transport
clear_wx	transport.h	/^	void *clear_wx(size_t size = SIZE) {$/;"	f	class:Transport
color	../../include/logging.cc	/^const char *color[debug + 1] = $/;"	v
conn_sock	task.cc	/^int listen_sock, conn_sock, nfds, epollfd;$/;"	v
created	transport.h	/^	time_t created; \/* the first communication time *\/$/;"	m	class:Transport
critical	../../include/logging.h	/^	critical,		\/* critical conditions *\/$/;"	e	enum:elevel
debug	../../include/logging.h	/^	debug,			\/* debug-level messages *\/$/;"	e	enum:elevel
diff	../../include/logging.h	/^	time_t diff; \/\/ time interval$/;"	m	struct:logging
elevel	../../include/logging.h	/^enum elevel {$/;"	g
email	version.h	/^const char *email = "nibz@qq.com";$/;"	v
emergency	../../include/logging.h	/^	emergency,		\/* application is unusable *\/$/;"	e	enum:elevel
epollfd	task.cc	/^int listen_sock, conn_sock, nfds, epollfd;$/;"	v
error	../../include/logging.h	/^	error,			\/* error conditions *\/$/;"	e	enum:elevel
ev	task.cc	/^struct epoll_event ev, events[MAX_EVENTS];$/;"	v	typeref:struct:epoll_event
events	task.cc	/^struct epoll_event ev, events[MAX_EVENTS];$/;"	v	typeref:struct:
fd	transport.h	/^	int fd; \/* file descriptor *\/$/;"	m	class:Transport
get_alive	transport.h	/^	bool get_alive(void) {$/;"	f	class:Transport
get_fd	transport.h	/^	int get_fd(void) {$/;"	f	class:Transport
get_id	transport.h	/^	std::string get_id(void) {$/;"	f	class:Transport
get_rp	transport.h	/^	size_t get_rp(void) {$/;"	f	class:Transport
get_rs	transport.h	/^	size_t get_rs(void) {$/;"	f	class:Transport
get_rx	transport.h	/^	void *get_rx(void) {$/;"	f	class:Transport
get_speed	transport.h	/^	double get_speed(void) {$/;"	f	class:Transport
get_wp	transport.h	/^	size_t get_wp(void) {$/;"	f	class:Transport
get_ws	transport.h	/^	size_t get_ws(void) {$/;"	f	class:Transport
get_wx	transport.h	/^	void *get_wx(void) {$/;"	f	class:Transport
handle	handle.cc	/^int handle(Transport *t, std::map<int, Transport*> *m, std::list<Transport*> *w, std::map<std::string, int> *interface) {$/;"	f
handler	task.cc	/^void handler(int signum) {$/;"	f
home	version.h	/^const char *home = "https:\/\/github.com\/nibaozhu\/project_x\/trunk\/src\/interface";$/;"	v
id	transport.h	/^	std::string id; \/* id.size() = ID_LENGTH *\/$/;"	m	class:Transport
info	../../include/logging.h	/^	info,			\/* informational *\/$/;"	e	enum:elevel
init	task.cc	/^int init(int argc, char **argv) {$/;"	f
initializing	../../include/logging.cc	/^int initializing(void)$/;"	f
ip	task.cc	/^char ip[3 + 1 + 3 + 1 + 3 + 1 + 3 + 1] = "0.0.0.0";$/;"	v
is_quit	task.cc	/^bool is_quit;$/;"	v
is_reconfigure	task.cc	/^bool is_reconfigure;$/;"	v
l	../../include/logging.cc	/^struct logging *l;$/;"	v	typeref:struct:logging
level	../../include/logging.cc	/^const char *level[debug + 1] = $/;"	v
listen_sock	task.cc	/^int listen_sock, conn_sock, nfds, epollfd;$/;"	v
logging	../../include/logging.h	/^struct logging {$/;"	s
main	main.cc	/^int main(int argc, char **argv) {$/;"	f
mode	../../include/logging.h	/^	char mode[MODE_MAX]; \/\/ logging file's mode$/;"	m	struct:logging
name	../../include/logging.h	/^	char name[NAME_MAX]; \/\/ program name$/;"	m	struct:logging
nfds	task.cc	/^int listen_sock, conn_sock, nfds, epollfd;$/;"	v
none	../../include/logging.h	/^	none = -1,		\/* none logging *\/$/;"	e	enum:elevel
notice	../../include/logging.h	/^	notice,			\/* normal but significant condition *\/$/;"	e	enum:elevel
number	../../include/logging.h	/^	unsigned int number; \/\/ logging file's suffix number when splits file$/;"	m	struct:logging
path	../../include/logging.h	/^	char path[PATH_MAX]; \/\/ logging file's path$/;"	m	struct:logging
peer_addr	transport.h	/^	struct sockaddr_in peer_addr;$/;"	m	class:Transport	typeref:struct:Transport::sockaddr_in
peer_addrlen	transport.h	/^	socklen_t peer_addrlen;$/;"	m	class:Transport
pflush	../../include/logging.cc	/^int pflush(void)$/;"	f
pid	../../include/logging.h	/^	pid_t pid; \/\/ program process id$/;"	m	struct:logging
plog	../../include/logging.h	83;"	d
port	task.cc	/^short int port = 12340;$/;"	v
pr	transport.h	/^	void pr(size_t width = WIDTH, bool b0 = false) {$/;"	f	class:Transport
pw	transport.h	/^	void pw(size_t width = WIDTH, bool b0 = false) {$/;"	f	class:Transport
reads	task.cc	/^int reads(Transport *t) {$/;"	f
rp	transport.h	/^	size_t rp; \/* transport data `Read' pointer position *\/$/;"	m	class:Transport
rs	transport.h	/^	size_t rs; \/* transport data `Read' size  *\/$/;"	m	class:Transport
rx	transport.h	/^	void *rx; \/* transport data `Read'  *\/$/;"	m	class:Transport
set_alive	transport.h	/^	bool set_alive(bool alive) {$/;"	f	class:Transport
set_disposition	task.cc	/^void set_disposition(void) {$/;"	f
set_fd	transport.h	/^	int set_fd(int fd) {$/;"	f	class:Transport
set_id	transport.h	/^	std::string set_id(const char *id) {$/;"	f	class:Transport
set_id	transport.h	/^	std::string set_id(std::string id) { \/* Make them happy. *\/$/;"	f	class:Transport
set_rp	transport.h	/^	size_t set_rp(size_t rp) {$/;"	f	class:Transport
set_rs	transport.h	/^	size_t set_rs(size_t rs) {$/;"	f	class:Transport
set_rx	transport.h	/^	void *set_rx(void *rx, size_t rs) {$/;"	f	class:Transport
set_speed	transport.h	/^	double set_speed(double speed) {$/;"	f	class:Transport
set_wp	transport.h	/^	size_t set_wp(size_t wp) {$/;"	f	class:Transport
set_ws	transport.h	/^	size_t set_ws(size_t ws) {$/;"	f	class:Transport
set_wx	transport.h	/^	void *set_wx(void *wx, size_t ws) {$/;"	f	class:Transport
setnonblocking	task.cc	/^int setnonblocking(int fd) {$/;"	f
size	../../include/logging.h	/^	unsigned long size; \/\/ logging has written bytes in file$/;"	m	struct:logging
size_max	../../include/logging.h	/^	unsigned long size_max; \/\/ size_max bytes in file$/;"	m	struct:logging
speed	transport.h	/^	double speed; \/* bytes per second *\/$/;"	m	class:Transport
stdout_level	../../include/logging.h	/^	enum elevel stdout_level;$/;"	m	struct:logging	typeref:enum:logging::elevel
stream	../../include/logging.h	/^	FILE *stream;$/;"	m	struct:logging
stream_level	../../include/logging.h	/^	enum elevel stream_level;$/;"	m	struct:logging	typeref:enum:logging::elevel
sysdate	../../include/logging.cc	/^int sysdate(char *str)$/;"	f
t0	../../include/logging.h	/^	struct tm t0; \/\/ start time$/;"	m	struct:logging	typeref:struct:logging::tm
t1	../../include/logging.h	/^	struct tm t1; \/\/ the last flush stream date\/time$/;"	m	struct:logging	typeref:struct:logging::tm
task	task.cc	/^int task(int argc, char **argv) {$/;"	f
task_r	task.cc	/^int task_r(std::list<Transport*> *r, std::list<Transport*> *w, std::map<int, Transport*> *m, std::map<std::string, int> *interface) {$/;"	f
task_w	task.cc	/^int task_w(std::list<Transport*> *w) {$/;"	f
task_x	task.cc	/^int task_x(std::list<Transport*> *r, std::list<Transport*> *w, std::map<int, Transport*> *m, std::map<std::string, int> *interface) {$/;"	f
uninit	task.cc	/^int uninit(std::list<Transport*> *r, std::list<Transport*> *w, std::map<int, Transport*> *m, std::map<std::string, int> *inferface) {$/;"	f
uninitialized	../../include/logging.cc	/^int uninitialized(void)$/;"	f
updated	transport.h	/^	time_t updated; \/* the lastest communication time *\/$/;"	m	class:Transport
version	version.h	/^const char *version = "1.2.1-stable";$/;"	v
warning	../../include/logging.h	/^	warning,		\/* warning conditions *\/$/;"	e	enum:elevel
wp	transport.h	/^	size_t wp; \/* transport data `Write' pointer position *\/$/;"	m	class:Transport
writes	task.cc	/^int writes(Transport *t) {$/;"	f
ws	transport.h	/^	size_t ws; \/* transport data `Write' size *\/$/;"	m	class:Transport
wx	transport.h	/^	void *wx; \/* transport data `Write' *\/$/;"	m	class:Transport
~Transport	transport.h	/^	~Transport() {$/;"	f	class:Transport
