!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
BUFFER_MAX	task.cc	9;"	d	file:
CPPFLAGS	Makefile	/^CPPFLAGS=-I .\/$/;"	m
CXXFLAGS	Makefile	/^CXXFLAGS=-O0 -U NDEBUG -U DEBUG_LOGGING -funsigned-char -g3 -std=c++0x -Wall -Wextra -m64$/;"	m
DATE_MAX	logging.h	37;"	d
HANDLE_H	handle.h	6;"	d
LDFLAGS	Makefile	/^LDFLAGS=$/;"	m
LOGGING_H	logging.h	9;"	d
MAIN_H	main.h	6;"	d
MAX_EVENTS	task.cc	8;"	d	file:
MODE_MAX	logging.h	36;"	d
SIZE	transport.h	27;"	d
SIZE_MAX	logging.h	16;"	d
SIZE_MAX	logging.h	18;"	d
TASK_H	task.h	6;"	d
TRANSPORT_H	transport.h	6;"	d
Transport	transport.h	/^		Transport(int fd, time_t created, struct sockaddr_in peer_addr, socklen_t peer_addrlen, size_t size = SIZE) {$/;"	f	class:Transport
Transport	transport.h	/^class Transport {$/;"	c
__plog	logging.cc	/^int __plog(enum elevel x, const char *__file, unsigned int __line, const char *__function, const char *fmt, ...)$/;"	f
addr	task.cc	/^struct sockaddr_in addr;$/;"	v	typeref:struct:sockaddr_in
alert	logging.h	/^	alert,			\/* action must be taken immediately *\/$/;"	e	enum:elevel
alive	transport.h	/^		bool alive; \/* true: live; false: die *\/$/;"	m	class:Transport
author	version.h	/^const char *author = "Ni BaoZhu";$/;"	v
cache	logging.h	/^	unsigned int cache; \/\/ logging has cache lines in memory$/;"	m	struct:logging
cache_max	logging.h	/^	unsigned int cache_max; \/\/ cache_max lines in memory$/;"	m	struct:logging
clear_color	logging.cc	/^const char *clear_color = "\\e[0m";$/;"	v
clear_rx	transport.h	/^		void *clear_rx(size_t size = SIZE) {$/;"	f	class:Transport
clear_wx	transport.h	/^		void *clear_wx(size_t size = SIZE) {$/;"	f	class:Transport
color	logging.cc	/^const char *color[debug + 1] = $/;"	v
created	transport.h	/^		time_t created; \/* the first communication time *\/$/;"	m	class:Transport
critical	logging.h	/^	critical,		\/* critical conditions *\/$/;"	e	enum:elevel
debug	logging.h	/^	debug,			\/* debug-level messages *\/$/;"	e	enum:elevel
diff	logging.h	/^	time_t diff; \/\/ time interval$/;"	m	struct:logging
elevel	logging.h	/^enum elevel {$/;"	g
email	version.h	/^const char *email = "nibz@qq.com";$/;"	v
emergency	logging.h	/^	emergency,		\/* application is unusable *\/$/;"	e	enum:elevel
epollfd	task.cc	/^int listen_sock, nfds, epollfd;$/;"	v
error	logging.h	/^	error,			\/* error conditions *\/$/;"	e	enum:elevel
ev	task.cc	/^struct epoll_event ev, events[MAX_EVENTS];$/;"	v	typeref:struct:epoll_event
events	task.cc	/^struct epoll_event ev, events[MAX_EVENTS];$/;"	v	typeref:struct:
events	transport.h	/^		__uint32_t events;$/;"	m	class:Transport
fd	transport.h	/^		int fd; \/* file descriptor *\/$/;"	m	class:Transport
get_alive	transport.h	/^		bool get_alive() {$/;"	f	class:Transport
get_events	transport.h	/^		__uint32_t get_events() {$/;"	f	class:Transport
get_fd	transport.h	/^		int get_fd() {$/;"	f	class:Transport
get_key	transport.h	/^		std::string get_key() {$/;"	f	class:Transport
get_peer	transport.h	/^		struct sockaddr_in get_peer(struct sockaddr_in *peer_addr, socklen_t *peer_addrlen) {$/;"	f	class:Transport
get_rp	transport.h	/^		size_t get_rp() {$/;"	f	class:Transport
get_rs	transport.h	/^		size_t get_rs() {$/;"	f	class:Transport
get_rx	transport.h	/^		void *get_rx() {$/;"	f	class:Transport
get_speed	transport.h	/^		double get_speed() {$/;"	f	class:Transport
get_updated	transport.h	/^		time_t get_updated() {$/;"	f	class:Transport
get_wp	transport.h	/^		size_t get_wp() {$/;"	f	class:Transport
get_ws	transport.h	/^		size_t get_ws() {$/;"	f	class:Transport
get_wx	transport.h	/^		void *get_wx() {$/;"	f	class:Transport
handle	handle.cc	/^int handle(Transport* t, std::list<Transport*> *w, std::map<int, Transport*> *m, std::map<std::string, int> *__m) {$/;"	f
handler	task.cc	/^void handler(int signum) {$/;"	f
info	logging.h	/^	info,			\/* informational *\/$/;"	e	enum:elevel
init	task.cc	/^int init(int argc, char **argv) {$/;"	f
initializing	logging.cc	/^int initializing(const char *name, const char *path, const char *mode, enum elevel stream_level, enum elevel stdout_level, time_t diff, unsigned int cache_max, unsigned long size_max)$/;"	f
ip	task.cc	/^char ip[3 + 1 + 3 + 1 + 3 + 1 + 3 + 1] = "0.0.0.0";$/;"	v
is_reconfigure	task.cc	/^bool is_reconfigure;$/;"	v
key	transport.h	/^		std::string key; \/* unused variable *\/$/;"	m	class:Transport
l	logging.cc	/^struct logging *l;$/;"	v	typeref:struct:logging
level	logging.cc	/^const char *level[debug + 1] = $/;"	v
listen_sock	task.cc	/^int listen_sock, nfds, epollfd;$/;"	v
logging	logging.h	/^struct logging {$/;"	s
main	main.cc	/^int main(int argc, char **argv) {$/;"	f
mode	logging.h	/^	char mode[MODE_MAX]; \/\/ logging file's mode$/;"	m	struct:logging
name	logging.h	/^	char name[NAME_MAX]; \/\/ program name$/;"	m	struct:logging
nfds	task.cc	/^int listen_sock, nfds, epollfd;$/;"	v
none	logging.h	/^	none = -1,		\/* none logging *\/$/;"	e	enum:elevel
notice	logging.h	/^	notice,			\/* normal but significant condition *\/$/;"	e	enum:elevel
number	logging.h	/^	unsigned int number; \/\/ logging file's suffix number when splits file$/;"	m	struct:logging
path	logging.h	/^	char path[PATH_MAX]; \/\/ logging file's path$/;"	m	struct:logging
peer_addr	transport.h	/^		struct sockaddr_in peer_addr;$/;"	m	class:Transport	typeref:struct:Transport::sockaddr_in
peer_addrlen	transport.h	/^		socklen_t peer_addrlen;$/;"	m	class:Transport
pflush	logging.cc	/^int pflush()$/;"	f
pid	logging.h	/^	pid_t pid; \/\/ program process id$/;"	m	struct:logging
plog	logging.h	82;"	d
port	task.cc	/^short int port = 12340;$/;"	v
pr	transport.h	/^		void pr(void) {$/;"	f	class:Transport
pw	transport.h	/^		void pw(void) {$/;"	f	class:Transport
quit	task.cc	/^bool quit;$/;"	v
reads	task.cc	/^int reads(Transport* t) {$/;"	f
reset	transport.h	/^		void reset() {$/;"	f	class:Transport
rp	transport.h	/^		size_t rp; \/* transport data `Read' pointer position *\/$/;"	m	class:Transport
rs	transport.h	/^		size_t rs; \/* transport data `Read' size  *\/$/;"	m	class:Transport
rx	transport.h	/^		void *rx; \/* transport data `Read'  *\/$/;"	m	class:Transport
set_alive	transport.h	/^		bool set_alive(bool alive) {$/;"	f	class:Transport
set_disposition	task.cc	/^void set_disposition() {$/;"	f
set_events	transport.h	/^		__uint32_t set_events(__uint32_t events) {$/;"	f	class:Transport
set_fd	transport.h	/^		int set_fd(int fd) {$/;"	f	class:Transport
set_key	transport.h	/^		std::string set_key(std::string &key) {$/;"	f	class:Transport
set_peer	transport.h	/^		struct sockaddr_in set_peer(struct sockaddr_in peer_addr, socklen_t peer_addrlen) {$/;"	f	class:Transport
set_rp	transport.h	/^		size_t set_rp(size_t rp) {$/;"	f	class:Transport
set_rs	transport.h	/^		size_t set_rs(size_t rs) {$/;"	f	class:Transport
set_rx	transport.h	/^		void *set_rx(void *rx, size_t rs) {$/;"	f	class:Transport
set_speed	transport.h	/^		double set_speed(double speed) {$/;"	f	class:Transport
set_updated	transport.h	/^		time_t set_updated() {$/;"	f	class:Transport
set_wp	transport.h	/^		size_t set_wp(size_t wp) {$/;"	f	class:Transport
set_ws	transport.h	/^		size_t set_ws(size_t ws) {$/;"	f	class:Transport
set_wx	transport.h	/^		void *set_wx(void *wx, size_t ws) {$/;"	f	class:Transport
setnonblocking	task.cc	/^int setnonblocking(int fd) {$/;"	f
size	logging.h	/^	unsigned long size; \/\/ logging has written bytes in file$/;"	m	struct:logging
size_max	logging.h	/^	unsigned long size_max; \/\/ size_max bytes in file$/;"	m	struct:logging
speed	transport.h	/^		double speed; \/* bytes per second *\/$/;"	m	class:Transport
stdout_level	logging.h	/^	enum elevel stdout_level;$/;"	m	struct:logging	typeref:enum:logging::elevel
stream	logging.h	/^	FILE *stream;$/;"	m	struct:logging
stream_level	logging.h	/^	enum elevel stream_level;$/;"	m	struct:logging	typeref:enum:logging::elevel
sysdate	logging.cc	/^int sysdate(char *str)$/;"	f
t0	logging.h	/^	struct tm t0; \/\/ start time$/;"	m	struct:logging	typeref:struct:logging::tm
t1	logging.h	/^	struct tm t1; \/\/ the last flush stream date\/time$/;"	m	struct:logging	typeref:struct:logging::tm
task	task.cc	/^int task(int argc, char **argv) {$/;"	f
task_r	task.cc	/^void task_r(std::list<Transport*> *r, std::list<Transport*> *w, std::map<int, Transport*> *m) {$/;"	f
task_w	task.cc	/^void task_w(std::list<Transport*> *w) {$/;"	f
task_x	task.cc	/^void task_x(std::list<Transport*> *r, std::list<Transport*> *w, std::map<int, Transport*> *m, std::map<std::string, int> *__m) {$/;"	f
uninit	task.cc	/^int uninit(std::list<Transport*> *r, std::list<Transport*> *w, std::map<int, Transport*> *m, std::map<std::string, int> *__m) {$/;"	f
uninitialized	logging.cc	/^int uninitialized()$/;"	f
updated	transport.h	/^		time_t updated; \/* the lastest communication time *\/$/;"	m	class:Transport
version	version.h	/^const char *version = "(1.1-unstable)";$/;"	v
warning	logging.h	/^	warning,		\/* warning conditions *\/$/;"	e	enum:elevel
wp	transport.h	/^		size_t wp; \/* transport data `Write' pointer position *\/$/;"	m	class:Transport
writes	task.cc	/^void writes(Transport* t) {$/;"	f
ws	transport.h	/^		size_t ws; \/* transport data `Write' size *\/$/;"	m	class:Transport
wx	transport.h	/^		void *wx; \/* transport data `Write' *\/$/;"	m	class:Transport
~Transport	transport.h	/^		~Transport() {$/;"	f	class:Transport
