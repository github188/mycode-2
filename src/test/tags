!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
BUFFER_LENGTH	test_client.c	19;"	d	file:
CFLAGS	GNUmakefile	/^CFLAGS=-g -O0$/;"	m
CPPFLAGS	GNUmakefile	/^CPPFLAGS=-I ..\/..\/include\/$/;"	m
CXXFLAGS	GNUmakefile	/^CXXFLAGS=-g -O0 -Wall -Wextra -Werror$/;"	m
DATE_MAX	../../include/logging.h	37;"	d
IP_LENGTH	test_client.c	18;"	d	file:
LDFLAGS	GNUmakefile	/^LDFLAGS=-lsqlite3 -lssl$/;"	m
LOGGING_H	../../include/logging.h	9;"	d
MAX_EVENTS	test_client.c	17;"	d	file:
MODE_MAX	../../include/logging.h	36;"	d
SIZE_MAX	../../include/logging.h	16;"	d
SIZE_MAX	../../include/logging.h	18;"	d
__execute	test_arch.cc	/^int __execute$/;"	f
__plog	../../include/logging.cc	/^int __plog(enum elevel x, const char *__file, unsigned int __line, const char *__function, const char *fmt, ...)$/;"	f
__read	test_arch.cc	/^int __read$/;"	f
__task	test_arch.cc	/^int __task()$/;"	f
__write	test_arch.cc	/^int __write$/;"	f
alert	../../include/logging.h	/^	alert,			\/* action must be taken immediately *\/$/;"	e	enum:elevel
cache	../../include/logging.h	/^	unsigned int cache; \/\/ logging has cache lines in memory$/;"	m	struct:logging
cache_max	../../include/logging.h	/^	unsigned int cache_max; \/\/ cache_max lines in memory$/;"	m	struct:logging
callback	test_sqlite3.c	/^int callback(void *NotUsed, int argc, char **argv, char **colname)$/;"	f
clear_color	../../include/logging.cc	/^const char *clear_color = "\\e[0m";$/;"	v
color	../../include/logging.cc	/^const char *color[debug + 1] = $/;"	v
count	test_client.c	/^int count = 0;$/;"	v
critical	../../include/logging.h	/^	critical,		\/* critical conditions *\/$/;"	e	enum:elevel
debug	../../include/logging.h	/^	debug,			\/* debug-level messages *\/$/;"	e	enum:elevel
diff	../../include/logging.h	/^	time_t diff; \/\/ time interval$/;"	m	struct:logging
do_something	test_logging.cc	/^int do_something(enum elevel x, int timeout)$/;"	f
do_use_fd	test_client.c	/^int do_use_fd()$/;"	f
elevel	../../include/logging.h	/^enum elevel {$/;"	g
emergency	../../include/logging.h	/^	emergency,		\/* application is unusable *\/$/;"	e	enum:elevel
error	../../include/logging.h	/^	error,			\/* error conditions *\/$/;"	e	enum:elevel
f1	test_const.cc	/^void f1(const std::string &s1, std::string &s2)$/;"	f
fds	test_client.c	/^int fds[MAX_EVENTS] = {0};$/;"	v
handler	test_logging.cc	/^void handler(int signum)$/;"	f
host	test_client.c	/^char host[1024];$/;"	v
info	../../include/logging.h	/^	info,			\/* informational *\/$/;"	e	enum:elevel
initialize_all	test_arch.cc	/^int initialize_all()$/;"	f
initializing	../../include/logging.cc	/^int initializing()$/;"	f
l	../../include/logging.cc	/^struct logging *l;$/;"	v	typeref:struct:logging
level	../../include/logging.cc	/^const char *level[debug + 1] = $/;"	v
logging	../../include/logging.h	/^struct logging {$/;"	s
main	test_arch.cc	/^int main(int argc, char **argv)$/;"	f
main	test_base64.c	/^int main(int argc, char **argv) {$/;"	f
main	test_client.c	/^int main(int argc, char **argv)$/;"	f
main	test_const.cc	/^int main()$/;"	f
main	test_digit.c	/^int main(void)$/;"	f
main	test_gnu.c	/^int main(void) {$/;"	f
main	test_list.cc	/^int main(void) {$/;"	f
main	test_logging.cc	/^int main(int argc, char **argv)$/;"	f
main	test_map.cc	/^int main(void) {$/;"	f
main	test_multimap.cc	/^int main(void) {$/;"	f
main	test_regex.c	/^int main(int argc, char **argv)$/;"	f
main	test_sqlite3.c	/^int main(int argc, char **argv)$/;"	f
main	test_string.cc	/^int main(void) {$/;"	f
main	test_thread.cc	/^int main(int argc, char **argv) {$/;"	f
main	test_unorderedmap.cc	/^int main(void) {$/;"	f
main	test_xml.c	/^int main(int argc, char **argv) {$/;"	f
main	test_xml2.cc	/^int main(int argc, char **argv) {$/;"	f
mode	../../include/logging.h	/^	char mode[MODE_MAX]; \/\/ logging file's mode$/;"	m	struct:logging
name	../../include/logging.h	/^	char name[NAME_MAX]; \/\/ program name$/;"	m	struct:logging
nconnect	test_client.c	/^int nconnect = 0;$/;"	v
none	../../include/logging.h	/^	none = -1,		\/* none logging *\/$/;"	e	enum:elevel
notice	../../include/logging.h	/^	notice,			\/* normal but significant condition *\/$/;"	e	enum:elevel
number	../../include/logging.h	/^	unsigned int number; \/\/ logging file's suffix number when splits file$/;"	m	struct:logging
path	../../include/logging.h	/^	char path[PATH_MAX]; \/\/ logging file's path$/;"	m	struct:logging
pflush	../../include/logging.cc	/^int pflush()$/;"	f
pid	../../include/logging.h	/^	pid_t pid; \/\/ program process id$/;"	m	struct:logging
plog	../../include/logging.h	82;"	d
quit	test_client.c	/^int quit = 0;$/;"	v
quit	test_logging.cc	/^unsigned int quit = 0;$/;"	v
reads	test_client.c	/^int reads(int fd)$/;"	f
set_disposition	test_logging.cc	/^int set_disposition()$/;"	f
setnonblocking	test_client.c	/^int setnonblocking(int fd)$/;"	f
size	../../include/logging.h	/^	unsigned long size; \/\/ logging has written bytes in file$/;"	m	struct:logging
size_max	../../include/logging.h	/^	unsigned long size_max; \/\/ size_max bytes in file$/;"	m	struct:logging
stdout_level	../../include/logging.h	/^	enum elevel stdout_level;$/;"	m	struct:logging	typeref:enum:logging::elevel
stream	../../include/logging.h	/^	FILE *stream;$/;"	m	struct:logging
stream_level	../../include/logging.h	/^	enum elevel stream_level;$/;"	m	struct:logging	typeref:enum:logging::elevel
sysdate	../../include/logging.cc	/^int sysdate(char *str)$/;"	f
t0	../../include/logging.h	/^	struct tm t0; \/\/ start time$/;"	m	struct:logging	typeref:struct:logging::tm
t1	../../include/logging.h	/^	struct tm t1; \/\/ the last flush stream date\/time$/;"	m	struct:logging	typeref:struct:logging::tm
uninitialize_all	test_arch.cc	/^int uninitialize_all()$/;"	f
uninitialized	../../include/logging.cc	/^int uninitialized()$/;"	f
usage	test_client.c	/^int usage(const char *argv0)$/;"	f
warning	../../include/logging.h	/^	warning,		\/* warning conditions *\/$/;"	e	enum:elevel
writes	test_client.c	/^int writes(int fd)$/;"	f
