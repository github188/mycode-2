{"name":"mycode","tagline":"epoll,route","body":"### 欢迎造访mycode主页:\r\n在 trunk/src/xserver 目录,是一个\"超级服务器\"程序.它可以实现长连接的多个程序间的数据交换.简化了网络交互密集型程序的部署,效率较高.\r\n\r\n### 应用场景:\r\n客户端(例如: A, B)向超级服务器建立长连接时注册分别32位正整数标志(例如: \"2\", \"3\"). 客户端依据一个简易的协议(详情在 Documentation) 交换数据.如果上述交换的数据是即时聊天讯息,这个场景可以理解成一个简易聊天系统.\r\n\r\n### 设计期间考虑到了什么问题:\r\n假如某一刻需要转发的报文长度是 1024kb(通常情况下tcp 的读,写缓冲区容量是640kb).第一次写入的时候,通常只能写入 640kb,此时还有 384kb 的报文需要转发,但仍然将\"写链表\"的节点移除(原因是如果对方不及时收取刚刚的640kb的话,会导致不必要的EAGAIN错误,因为此时的写操作是盲目性的).此刻需要监听目标文件描述符的 EPOLLOUT 事件,若可以再次做写操作.下次会被捕获,并将程序的该缓冲区的地址插入\"写链表\"用于排队.这提高了效率.\r\n\r\n### 作者:\r\n目前的主要作者是 @nibaozhu.\r\n\r\n### 如果遇到bug:\r\n请在 问题列表 issues 告知我.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}